name: 2 - Release, Deploy, and Publish Docker Image

on:
  push:
    tags:
      - 'v*' # Triggers on any tag starting with 'v', e.g., v0.2.0

env:
  # Set registry and image name variables
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # e.g., your_username/your_repo_name
  
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Needed to push to GHCR

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      # 1. DOWNLOAD ARTIFACTS
      # We need the artifacts generated by the CI run to build the Docker image
      - name: Download Model Artifacts
        uses: actions/download-artifact@v4
        with:
          name: model-artifacts
          path: artifacts/

      # 2. LOGIN TO GHCR
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. SET UP METADATA AND TAG
      - name: Extract Metadata (Tagging)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}} # Uses git tag as version (e.g., v0.2.0)
            
      # 4. BUILD DOCKER IMAGE
      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false # We only build here; push is conditional/separate
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
      # 5. CONTAINER SMOKE TEST (CRUCIAL ACCEPTANCE CHECK)
      - name: Run Acceptance Tests on Container
        run: |
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | awk -F',' '{print $1}')
          
          # Start the container in the background
          docker run -d -p 8080:8080 --name smoke-test "$IMAGE_TAG"
          sleep 10 # Give the server time to start
          
          # Health Check (Acceptance Test 1)
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/health)
          if [ "$STATUS" -ne "200" ]; then
            echo "Health check failed with status $STATUS"
            docker logs smoke-test
            exit 1
          fi
          
          # Prediction Check (Acceptance Test 2) - Using the sample payload
          PREDICT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST http://localhost:8080/predict \
            -H "Content-Type: application/json" \
            -d '{"age": 0.02, "sex": -0.044, "bmi": 0.06, "bp": -0.03, "s1": -0.02, "s2": 0.03, "s3": -0.02, "s4": 0.02, "s5": 0.02, "s6": -0.001}')
            
          if [ "$PREDICT_STATUS" -ne "200" ]; then
            echo "Prediction test failed with status $PREDICT_STATUS"
            docker logs smoke-test
            exit 1
          fi

      # 6. PUSH TO GHCR
      - name: Push to GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true # Push the image
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # 7. CREATE GITHUB RELEASE
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md # Uses your CHANGELOG content for release notes
          files: artifacts/metrics.json # Attaches the metrics file as release evidence